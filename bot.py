import sqlite3
from datetime import datetime
import os

import telebot
from telebot import types


token = os.getenv("TOKEN")
channel_id = int(os.getenv("CHANNEL_ID"))
admin_id = int(os.getenv("ADMIN_ID"))

bot = telebot.TeleBot(token)

allowed_types = ["text", "photo", "video", "audio", "voice", "sticker", "animation", "video_note", "poll"]
prohibited_types = ["document", "invoice", "dice", "location", "venue", "contact"]

welcome_message = """
üôã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å –≤ –º–æ–µ–º –±–æ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ ["–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"](—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª)!
–ù–∞—á–∏–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–º –í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ [–£—Å–ª–æ–≤–∏—è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è](—Å—Å—ã–ª–∫–∞ –Ω–∞ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è telegraph).
–î–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç –∏—Ö —á–∏—Ç–∞—Ç—å, –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.
–ó–∞ –≤—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ—Å–µ—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –¢–û–õ–¨–ö–û –í–´.
–ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å (–º–æ–∂–µ—Ç –∫–∞—Ä–∞–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –±–∞–Ω–æ–º):
1. –ë–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–æ —Å–º—ã—Å–ª—É —Å–æ–æ–±—â–µ–Ω–∏—è
2. –ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
3. –†–µ–∫–ª–∞–º–∞ –±–µ–∑ –º–æ–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è
4. –°–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Ä—É—à–∞—é—â–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–§
–í—Å–µ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ª–∏–±–æ —É–∂–µ —É–∫–∞–∑–∞–Ω—ã –≤ [–£—Å–ª–æ–≤–∏—è—Ö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è](—Å—Å—ã–ª–∫–∞ –Ω–∞ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è telegraph).
"""

# Designed to store the time of the ban on sending messages
acceptable_time = 0


@bot.message_handler(commands=["start"])
def welcome(message):
    if message.from_user.id == admin_id:
        create_admin_panel(message)
    else:
        start_message = bot.send_message(message.chat.id, welcome_message, parse_mode="Markdown")
        bot.pin_chat_message(message.chat.id, start_message.message_id)


# ================= Admin Functions =================
# Here are functions that handle admin messages.
def create_admin_panel(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏"), types.KeyboardButton("üö´ –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–∞ –≤—Ä–µ–º—è"))
    markup.row(types.KeyboardButton("üëÆ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"), types.KeyboardButton("‚ò† –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"))
    bot.send_message(message.chat.id, "–ë—Ä–∞—Ç–∏—à–∫–∞, —è —Ç–µ–±–µ –∞–¥–º–∏–Ω–∫—É –ø—Ä–∏–Ω–µ—Åüí©üçΩ", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏")
def message_info_button(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ URL —Å–æ–æ–±—â–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, get_info_about_user_by_id)

def get_info_about_user_by_id(message):
    con = sqlite3.connect("users_data.db")
    cur = con.cursor()
    # Getting message_id from url
    user_id = cur.execute("SELECT user_id FROM messages WHERE message_id = ?", (message.text.split("/")[5],)).fetchone()[0]
    result = cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,)).fetchall()[0]
    con.commit()
    con.close()
    bot.send_message(message.chat.id, (f"–ù–∏–∫ - {"@" + str(result[1])}\n"
                                       f"ID - {result[2]}\n"
                                       f"–ò–º—è - {str(result[3]) + " " + str(result[4])}\n"
                                       f"–Ø–∑—ã–∫ - {result[5]}\n"
                                       f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ - {True if result[6] == 1 else False}").replace("None", ""))

@bot.message_handler(func=lambda message: message.text == "üö´ –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–∞ –≤—Ä–µ–º—è")
def prohibit_sending_messages_button(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã; —É–º–Ω–æ–∂—å—Ç–µ –Ω–∞ 60/1440 –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —á–∞—Å–æ–≤/–¥–Ω–µ–π):")
    bot.register_next_step_handler(msg, block_sending_for_minutes)

def block_sending_for_minutes(message):
    global acceptable_time
    # Change acceptable_time value to actual time + chosen time (can be mathematical expression)
    acceptable_time = message.date + eval(message.text) * 60
    bot.send_message(message.chat.id, f"–ó–∞–ø—Ä–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ {datetime.fromtimestamp(acceptable_time).strftime("%H:%M:%S %d/%m/%Y")}")

@bot.message_handler(func=lambda message: message.text == "üëÆ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
def block_or_unblock_button(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="block"), types.InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="unblock"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: callback.data in ["block", "unblock"])
def callback_block_or_unblock_handler(callback):
    msg = bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    bot.register_next_step_handler(msg, lambda msg: block_or_unblock_user(msg, 1 if callback.data == "block" else 0))

def block_or_unblock_user(message, is_blocked):
    con = sqlite3.connect("users_data.db")
    cur = con.cursor()
    if message.text.isdigit():
        cur.execute("UPDATE users SET is_blocked = ? WHERE user_id = ?", (is_blocked, message.text))
    else:
        cur.execute("UPDATE users SET is_blocked = ? WHERE username = ?", (is_blocked, message.text.replace("@", "")))
    con.commit()
    con.close()
    notification = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_blocked == 1 else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    bot.send_message(message.chat.id, notification)

@bot.message_handler(func=lambda message: message.text == "‚ò† –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î")
def delete_all_info_button(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="delete_agree"), types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="delete_disagree"))
    bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã", reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: callback.data == "delete_disagree")
def answer_delete_disagree(callback):
    bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text="–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@bot.callback_query_handler(func=lambda callback: callback.data == "delete_agree")
def get_id_for_deleting_info(callback):
    msg = bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    bot.register_next_step_handler(msg, delete_all_info_about_user)

def delete_all_info_about_user(message):
    con = sqlite3.connect("users_data.db")
    cur = con.cursor()
    if message.text.isdigit():
        user_id = message.text
    else:
        user_id = cur.execute("SELECT user_id FROM users WHERE username = ?", (message.text.replace("@", ""),)).fetchone()[0]
    cur.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    cur.execute("DELETE FROM messages WHERE user_id = ?", (user_id,))
    con.commit()
    con.close()
    bot.send_message(message.chat.id, "–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —É–¥–∞–ª–µ–Ω—ã")


# ================= User Functions =================
# Here are functions that handle user messages.
@bot.message_handler(content_types=prohibited_types)
def prohibited_messages_handler(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞")

@bot.message_handler(content_types=allowed_types)
def allowed_messages_handler(message):
    create_db()
    result = check_message(message)
    if result:
        bot.send_message(message.chat.id, result)
    else:
        channel_message = bot.copy_message(channel_id, message.chat.id, message.message_id)
        add_new_message_to_db(message, channel_message.message_id)
        bot.send_message(message.chat.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

def check_message(message):
    if message.date < acceptable_time:
        return f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ {datetime.fromtimestamp(acceptable_time).strftime("%H:%M:%S %d/%m/%Y")}"
    elif not check_for_user_existence(message.from_user.id):
        add_new_user_to_db(message)
    elif check_user_for_blocking(message.from_user.id):
        return "–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ï—Å–ª–∏ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞, —Ç–æ –ø–∏—à–∏—Ç–µ @username"
    elif not check_time_for_sending(message):
        return "–° –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ 15 –º–∏–Ω—É—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë"

def check_for_user_existence(user_id):
    con = sqlite3.connect("users_data.db")
    cur = con.cursor()
    result = cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,)).fetchall()
    con.close()
    # Return True if exist
    return True if result else False

def check_user_for_blocking(user_id):
    con = sqlite3.connect("users_data.db")
    cur = con.cursor()
    result = cur.execute("SELECT is_blocked FROM users WHERE user_id = ?", (user_id,)).fetchone()[0]
    con.close()
    # Return True if blocked
    return True if result == 1 else False

# Checking for 15 minutes left since the last message
def check_time_for_sending(message):
    con = sqlite3.connect("users_data.db")
    cur = con.cursor()
    last_message_time = cur.execute("SELECT message_time FROM messages WHERE user_id = ? ORDER BY id DESC LIMIT 1", (message.from_user.id,)).fetchone()[0]
    con.close()
    return True if message.date - last_message_time > 900 else False


# ================= Secondary Functions =================
# Here are the secondary functions used in the main code.
def create_db():
    con = sqlite3.connect("users_data.db")
    cur = con.cursor()
    cur.execute("""
                   CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY,
                    username TEXT,
                    user_id INTEGER NOT NULL,
                    first_name TEXT,
                    last_name TEXT,
                    language TEXT,
                    is_blocked INTEGER NOT NULL
                   )""")
    cur.execute("""
                   CREATE TABLE IF NOT EXISTS messages (
                    id INTEGER PRIMARY KEY,
                    message_id INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    message_time INTEGER NOT NULL
                   )""")
    con.commit()
    con.close()

def add_new_user_to_db(message):
    con = sqlite3.connect("users_data.db")
    cur = con.cursor()
    values = (message.from_user.username, message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.language_code, 0)
    cur.execute("INSERT INTO users (username, user_id, first_name, last_name, language, is_blocked) VALUES (?, ?, ?, ?, ?, ?)", values)
    con.commit()
    con.close()

# Message_id is from the channel, not the chat with the user
def add_new_message_to_db(message, message_id):
    con = sqlite3.connect("users_data.db")
    cur = con.cursor()
    values = (message_id, message.from_user.id, message.date)
    cur.execute("INSERT INTO messages (message_id, user_id, message_time) VALUES (?, ?, ?)", values)
    con.commit()
    con.close()


# Start bot
if __name__ == "__main__":
    bot.infinity_polling(none_stop=True)
