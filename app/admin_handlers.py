from datetime import datetime

from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.fsm.context import FSMContext

import app.db as db
from constants import ADMINS_ID
from app.keyboards import admin_panel_keyboard, ban_or_unban_inline_keyboard, delete_user_info_keyboard
from app.states import MessageInfo, ProhibitSending, Ban_Or_Unban, DeleteUserInfo

router = Router()

is_admin = F.from_user.id.in_(ADMINS_ID)


@router.message(is_admin, CommandStart())
async def create_admin_panel(message: Message) -> None:
    await message.answer(
        "–ë—Ä–∞—Ç–∏—à–∫–∞, —è —Ç–µ–±–µ –∞–¥–º–∏–Ω–∫—É –ø—Ä–∏–Ω–µ—Åüí©üçΩ",
        reply_markup=admin_panel_keyboard
    )


@router.message(is_admin & F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏")
async def info_button_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(MessageInfo.next_step)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ URL —Å–æ–æ–±—â–µ–Ω–∏—è:"
    )


@router.message(MessageInfo.next_step)
async def send_info_about_user(message: Message, state: FSMContext) -> None:
    await state.clear()
    user_info = db.get_user_info_by_message_id(message)
    if user_info:
        await message.answer((f"–ù–∏–∫ - {"@" + str(user_info[1])}\n"
                            f"ID - {user_info[2]}\n"
                            f"–ò–º—è - {str(user_info[3]) + " " + str(user_info[4])}\n"
                            f"–Ø–∑—ã–∫ - {user_info[5]}\n"
                            f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ - {user_info[6] == 1}").replace("None", "")
        )
    else:
        await message.answer((
            "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å id —Å–æ–æ–±—â–µ–Ω–∏—è, –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª, –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ id –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É.")
        )


@router.message(is_admin & F.text == "üö´ –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–∞ –≤—Ä–µ–º—è")
async def prohibit_sending_button_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(ProhibitSending.next_step)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"4s\", –≥–¥–µ 4 —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∞ s —ç—Ç–æ –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (s - —Å–µ–∫—É–Ω–¥—ã, m - –º–∏–Ω—É—Ç—ã, h - —á–∞—Å—ã, d - –¥–Ω–∏):"
    )


@router.message(ProhibitSending.next_step)
async def prohibit_sending_for_minutes(message: Message, state: FSMContext) -> None:
    await state.clear()
    literals = {"s": 1, "m": 60, "h": 3600, "d": 86400}
    seconds = message.text[:-1]
    literal = message.text[-1]
    if seconds.isdigit() and literal in literals:
        prohibit_sending_time = message.date.timestamp() + int(seconds) * literals[literal]
        db.set_prohibit_sending_time(prohibit_sending_time)
        await message.answer(
            f"–ó–∞–ø—Ä–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ {datetime.fromtimestamp(prohibit_sending_time).strftime("%H:%M:%S %d.%m.%Y")}."
        )
    else:
        await message.answer(
            "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ."
        )


@router.message(is_admin & F.text == "üëÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏")
async def ban_control_button_handler(message: Message) -> None:
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=ban_or_unban_inline_keyboard
    )


@router.callback_query(F.data.in_({"ban", "unban"}))
async def ban_or_unban_callback_handler(callback: CallbackQuery, state: FSMContext) -> None:
    ban_value = int(callback.data == "ban")
    await state.set_state(Ban_Or_Unban.ban_value)
    await state.update_data(ban_value=ban_value)
    await callback.message.edit_text(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    )


@router.message(Ban_Or_Unban.ban_value)
async def ban_or_unban_user(message: Message, state: FSMContext) -> None:
    is_banned = (await state.get_data())["ban_value"]
    await state.clear()
    if db.set_is_banned_value(message.text, is_banned):
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_banned == 1 else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        )
    else:
        await message.answer(
            "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∏–∫ –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑ –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
        )


@router.message(is_admin & F.text == "‚ò† –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î")
async def delete_user_info_button_handler(message: Message) -> None:
    await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        reply_markup=delete_user_info_keyboard
    )


@router.callback_query(F.data == "delete_user_info_disagree")
async def delete_user_info_disagree_handler(callback: CallbackQuery) -> None:
    await callback.message.edit_text(
        "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
    )


@router.callback_query(F.data == "delete_user_info_agree")
async def delete_user_info_agree_handler(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(DeleteUserInfo.next_step)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    )


@router.message(DeleteUserInfo.next_step)
async def delete_user_info(message: Message, state: FSMContext) -> None:
    await state.clear()
    if db.delete_user_info_from_db(message.text):
        await message.answer(
            "–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —É–¥–∞–ª–µ–Ω—ã."
        )
    else:
        await message.answer(
            "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∏–∫ –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑ –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
        )


@router.message(is_admin)
async def incorrect_message_handler(message: Message) -> None:
    await message.answer(
        "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º —É–∫–∞–∑–∞–Ω–∏—è–º"
    )
