from datetime import datetime

from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from constants import ADMINS_ID
from app.keyboards import *
from app.states import *
from app.db import *

router = Router()

is_admin = F.from_user.id.in_(ADMINS_ID)


@router.message(is_admin, CommandStart())
async def create_admin_panel(message: Message) -> None:
    await message.answer(
        "–ë—Ä–∞—Ç–∏—à–∫–∞, —è —Ç–µ–±–µ –∞–¥–º–∏–Ω–∫—É –ø—Ä–∏–Ω–µ—Åüí©üçΩ",
        reply_markup=admin_panel_keyboard
    )


@router.message(is_admin & F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏")
async def info_button_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(MessageInfo.next_step)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ URL —Å–æ–æ–±—â–µ–Ω–∏—è:"
    )


@router.message(MessageInfo.next_step)
async def send_info_about_user(message: Message, state: FSMContext) -> None:
    await state.clear()
    user_info = get_user_info_by_message_id(message)
    await message.answer((f"–ù–∏–∫ - {"@" + str(user_info[1])}\n"
                          f"ID - {user_info[2]}\n"
                          f"–ò–º—è - {str(user_info[3]) + " " + str(user_info[4])}\n"
                          f"–Ø–∑—ã–∫ - {user_info[5]}\n"
                          f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ - {True if user_info[6] == 1 else False}").replace("None", "")
    )


@router.message(is_admin & F.text == "üö´ –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–∞ –≤—Ä–µ–º—è")
async def prohibit_sending_button_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(ProhibitSending.next_step)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã; —É–º–Ω–æ–∂—å—Ç–µ –Ω–∞ 60/1440 –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —á–∞—Å–æ–≤/–¥–Ω–µ–π):"
    )


@router.message(ProhibitSending.next_step)
async def prohibit_sending_for_minutes(message: Message, state: FSMContext) -> None:
    await state.clear()
    # Change acceptable_time value to actual time + chosen time (can be mathematical expression)
    prohibit_sending_time = message.date.timestamp() + eval(message.text) * 60
    set_prohibit_sending_time(prohibit_sending_time)
    await message.answer(
        f"–ó–∞–ø—Ä–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ {datetime.fromtimestamp(prohibit_sending_time).strftime("%H:%M:%S %d.%m.%Y")}"
    )


@router.message(is_admin & F.text == "üëÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏")
async def ban_control_button_handler(message: Message) -> None:
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=ban_or_unban_inline_keyboard
    )


@router.callback_query(F.data.in_({"ban", "unban"}))
async def bun_or_unban_callback_handler(callback: CallbackQuery, state: FSMContext) -> None:
    ban_value = 1 if callback.data == "ban" else 0
    await state.set_state(Ban_Or_Unban.ban_value)
    await state.update_data(ban_value=ban_value)
    await callback.message.edit_text(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    )


@router.message(Ban_Or_Unban.ban_value)
async def ban_or_unban_user(message: Message, state: FSMContext) -> None:
    is_banned = (await state.get_data())["ban_value"]
    await state.clear()
    set_is_banned_value(message.text, is_banned)
    await message.answer(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_banned == 1 else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    )


@router.message(is_admin & F.text == "‚ò† –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î")
async def delete_user_info_button_handler(message: Message) -> None:
    await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        reply_markup=delete_user_info_keyboard
    )


@router.callback_query(F.data == "delete_user_info_disagree")
async def delete_user_info_agree_handler(callback: CallbackQuery) -> None:
    await callback.message.edit_text(
        "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
    )


@router.callback_query(F.data == "delete_user_info_agree")
async def delete_user_info_agree_handler(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(DeleteUserInfo.next_step)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    )


@router.message(DeleteUserInfo.next_step)
async def delete_user_info(message: Message, state: FSMContext) -> None:
    await state.clear()
    delete_user_info_from_db(message)
    await message.answer(
        "–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —É–¥–∞–ª–µ–Ω—ã"
    )
