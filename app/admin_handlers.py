import os
import sqlite3
import datetime

from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from keyboards import admin_panel_keyboard, block_or_unblock_keyboard
from states import NextMessageHandler

router = Router()
    
admin_id = int(os.getenv("ADMIN_ID"))
is_admin = F.from_user.id == admin_id
acceptable_time = 0


@router.message(is_admin & CommandStart())
async def create_admin_panel(message: Message) -> None:
    message.answer("–ë—Ä–∞—Ç–∏—à–∫–∞, —è —Ç–µ–±–µ –∞–¥–º–∏–Ω–∫—É –ø—Ä–∏–Ω–µ—Åüí©üçΩ", reply_markup=admin_panel_keyboard)


@router.message(is_admin & F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏")
async def message_info_button(message: Message, state: FSMContext) -> None:
    await state.set_state(NextMessageHandler.next_step)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ URL —Å–æ–æ–±—â–µ–Ω–∏—è:")


@router.message(NextMessageHandler.next_step)
async def send_info_about_user_by_id(message: Message) -> None:
    con = sqlite3.connect("users_data.db")
    cur = con.cursor()
    # Getting message_id from url
    user_id = cur.execute("SELECT user_id FROM messages WHERE message_id = ?", (message.text.split("/")[5],)).fetchone()[0]
    result = cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,)).fetchall()[0]
    con.commit()
    con.close()
    await message.answer((f"–ù–∏–∫ - {"@" + str(result[1])}\n"
                          f"ID - {result[2]}\n"
                          f"–ò–º—è - {str(result[3]) + " " + str(result[4])}\n"
                          f"–Ø–∑—ã–∫ - {result[5]}\n"
                          f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ - {True if result[6] == 1 else False}").replace("None", "")
    )


@router.message(is_admin & F.text == "üö´ –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–∞ –≤—Ä–µ–º—è")
async def prohibit_sending_messages_button(message: Message, state: FSMContext) -> None:
    await state.set_state(NextMessageHandler.next_step)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã; —É–º–Ω–æ–∂—å—Ç–µ –Ω–∞ 60/1440 –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —á–∞—Å–æ–≤/–¥–Ω–µ–π):")


@router.message(NextMessageHandler.next_step)
async def block_sending_for_minutes(message: Message) -> None:
    global acceptable_time
    # Change acceptable_time value to actual time + chosen time (can be mathematical expression)
    acceptable_time = message.date + eval(message.text) * 60
    await message.answer(f"–ó–∞–ø—Ä–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ {datetime.fromtimestamp(acceptable_time).strftime("%H:%M:%S %d/%m/%Y")}")


@router.message(is_admin & F.text == "üëÆ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
async def block_or_unblock_button(message: Message) -> None:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=block_or_unblock_keyboard)


@router.callback_query(F.data.in_({"block", "unblock"}))
async def callback_block_or_unblock_handler(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(NextMessageHandler.next_step)
    next_step = True if callback.data == "block" else False
    await state.update_data(next_step=next_step)
    # [WARNING] –í–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —è –Ω–µ –∑–Ω–∞—é –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è callback
    await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")


@router.message(NextMessageHandler.next_step)
async def block_or_unblock_user(message: Message, state: FSMContext) -> None:
    con = sqlite3.connect("users_data.db")
    cur = con.cursor()
    is_for_block = state.get_data()["next_step"]
    if message.text.isdigit():
        cur.execute("UPDATE users SET is_blocked = ? WHERE user_id = ?", (is_for_block, message.text))
    else:
        cur.execute("UPDATE users SET is_blocked = ? WHERE username = ?", (is_for_block, message.text.replace("@", "")))
    con.commit()
    con.close()
    message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_for_block == 1 else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")


@bot.message_handler(func=lambda message: message.text == "‚ò† –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î")
async def delete_all_info_button(message) -> None:
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="delete_agree"), types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="delete_disagree"))
    bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã", reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: callback.data == "delete_disagree")
async def answer_delete_disagree(callback) -> None:
    bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text="–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@bot.callback_query_handler(func=lambda callback: callback.data == "delete_agree")
async def get_id_for_deleting_info(callback) -> None:
    msg = bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    bot.register_next_step_handler(msg, delete_all_info_about_user)


async def delete_all_info_about_user(message) -> None:
    con = sqlite3.connect("users_data.db")
    cur = con.cursor()
    if message.text.isdigit():
        user_id = message.text
    else:
        user_id = cur.execute("SELECT user_id FROM users WHERE username = ?", (message.text.replace("@", ""),)).fetchone()[0]
    cur.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    cur.execute("DELETE FROM messages WHERE user_id = ?", (user_id,))
    con.commit()
    con.close()
    bot.send_message(message.chat.id, "–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —É–¥–∞–ª–µ–Ω—ã")
